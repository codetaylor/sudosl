; ==============================================================================
; for loop test
; ==============================================================================
local j 10
for i 0 (< i 5) (++ i)
	= j (+ j 10)
AssertEqual j 60

; ==============================================================================
; scope test
; ==============================================================================
= j 10
for i 0 (< i 5) (++ i)
	local z 10
	+= j z
AssertEqual j 60

; ==============================================================================
; local var override test
; ==============================================================================
= j 10
for i 0 (< i 5) (++ i)
	local i 10
	+= j i
AssertEqual j 60

; ==============================================================================
; inner var manipulation test
; ==============================================================================
= j 10
for i 0 (< i 5) (++ i)
	++ i
	++ j
AssertEqual j 13

; ==============================================================================
; loop var available test
; ==============================================================================
= j 10
for i 0 (< i 5) (++ i)
	+= j i
AssertEqual j 20

; ==============================================================================
; nested loop test
; ==============================================================================
= j 10
for x 0 (< x 5) (++ x)
	for y 0 (< y 5) (++ y)
		++ j
AssertEqual j 35

; ==============================================================================
; do loop test; evaluates predicate last
; ==============================================================================
= j 0
do (< j 0)
	++ j
AssertEqual j 1

; ==============================================================================
; while loop test; evaluates predicate first
; ==============================================================================
= j 0
while (< j 0)
	++ j
AssertEqual j 0