; conditional test

; ==============================================================================
; switch
; ==============================================================================
local x 0
for i 0 (< i 10) (++ i)
	switch
		case (< i 5)
			++ x
		case (== i 5)
			*= x 5
		default 
			-= x 2
AssertEqual x 17

; ==============================================================================
; switch scope test
; ==============================================================================
= x 0
for i 0 (< i 10) (++ i)
	local z 3
	switch
		case (< i 5)
			+= x z
		case (== i 5)
			*= x 5
		default 
			-= x 2
	AssertEqual z 3
AssertEqual x 67

; ==============================================================================
; if form:
; 	if (predicate) (do if true) (do if false)
; ==============================================================================
= x 0
for i 0 (< i 10) (++ i)
	if (< i 3) (-- x) (++ x)
AssertEqual x 4

; ==============================================================================
; alternate if form:
; 	if (predicate)
;		do if true
;		do if false
; ==============================================================================
= x 0
for i 0 (< i 10) (++ i)
	if (< i 3) 
		-- x 
		++ x
AssertEqual x 4

; ==============================================================================
; alternate if form:
; 	if (predicate)
;		begin
;			do if true
;			do if true
;			...
;		begin
;			do if false
;			do if false
;			...
; ==============================================================================
= x 0
for i 0 (< i 10) (++ i)
	if (< i 3) 
		begin
			++ x
			++ x
		begin
			++ x
			++ x
			++ x
AssertEqual x 27

; ==============================================================================
; 	cond
;		(predicate) (expression) (expression) ...
;		(predicate) (expression) (expression) ...
;		else (expression) (expression) ...
; ==============================================================================
= x 0
for i 0 (< i 10) (++ i)
	cond
		(< i 3) (+= x 2)
		(< i 8) (*= x 2)
		else (+= x 10)
AssertEqual x 212

; ==============================================================================
; 	cond
;		(predicate)
;			expression
;			expression
;			...
;		(predicate)
;			expression
;			expression
;			...
;		else
;			expression
;			expression
;			...
; ==============================================================================
= x 0
for i 0 (< i 10) (++ i)
	cond
		(< i 3)
			++ x
			++ x
		(< i 8)
			*= x 4
			/= x 2
		else
			+= x 5
			+= x 5
AssertEqual x 212

; ==============================================================================
;	block is a closure
; ==============================================================================
= x 0
AssertEqual x 0
block
	local x 10
	AssertEqual x 10
AssertEqual x 0

; ==============================================================================
;	block in an if statement
; ==============================================================================
= x 0
AssertEqual x 0
if (> 5 2)
	block
		local x 10
		AssertEqual x 10
	block
		local x 12
		AssertEqual x 12
AssertEqual x 0

; ==============================================================================
;	syntactic sugar: then/else == block in an if statement
; ==============================================================================
= x 0
AssertEqual x 0
if (> 5 2)
	then
		local x 10
		AssertEqual x 10
	else
		local x 12
		AssertEqual x 12
AssertEqual x 0